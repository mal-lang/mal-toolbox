# mypy: ignore-errors
# Generated from mal.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,51,332,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,
        170,8,8,10,8,12,8,173,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,182,8,
        9,1,9,3,9,185,8,9,1,9,1,9,5,9,189,8,9,10,9,12,9,192,9,9,1,9,1,9,
        1,9,1,9,1,10,4,10,199,8,10,11,10,12,10,200,1,11,5,11,204,8,11,10,
        11,12,11,207,9,11,1,11,1,11,4,11,211,8,11,11,11,12,11,212,1,12,1,
        12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,4,16,224,8,16,11,16,12,16,
        225,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
        1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,
        1,48,1,48,1,48,5,48,308,8,48,10,48,12,48,311,9,48,1,48,1,48,1,49,
        1,49,1,49,1,49,5,49,319,8,49,10,49,12,49,322,9,49,1,49,1,49,1,49,
        1,49,1,49,1,50,1,50,1,50,1,50,1,320,0,51,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
        101,51,1,0,7,4,0,10,10,13,13,34,34,92,92,1,0,34,34,2,0,10,10,13,
        13,1,0,48,57,4,0,48,57,65,90,95,95,97,122,1,0,33,33,3,0,9,10,13,
        13,32,32,343,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,112,1,0,0,0,5,118,1,0,0,0,
        7,131,1,0,0,0,9,139,1,0,0,0,11,147,1,0,0,0,13,156,1,0,0,0,15,161,
        1,0,0,0,17,165,1,0,0,0,19,176,1,0,0,0,21,198,1,0,0,0,23,205,1,0,
        0,0,25,214,1,0,0,0,27,216,1,0,0,0,29,218,1,0,0,0,31,220,1,0,0,0,
        33,223,1,0,0,0,35,227,1,0,0,0,37,229,1,0,0,0,39,231,1,0,0,0,41,233,
        1,0,0,0,43,235,1,0,0,0,45,237,1,0,0,0,47,239,1,0,0,0,49,243,1,0,
        0,0,51,247,1,0,0,0,53,249,1,0,0,0,55,251,1,0,0,0,57,253,1,0,0,0,
        59,255,1,0,0,0,61,257,1,0,0,0,63,259,1,0,0,0,65,262,1,0,0,0,67,265,
        1,0,0,0,69,268,1,0,0,0,71,270,1,0,0,0,73,272,1,0,0,0,75,274,1,0,
        0,0,77,276,1,0,0,0,79,279,1,0,0,0,81,281,1,0,0,0,83,284,1,0,0,0,
        85,287,1,0,0,0,87,290,1,0,0,0,89,292,1,0,0,0,91,294,1,0,0,0,93,296,
        1,0,0,0,95,298,1,0,0,0,97,302,1,0,0,0,99,314,1,0,0,0,101,328,1,0,
        0,0,103,104,5,97,0,0,104,105,5,98,0,0,105,106,5,115,0,0,106,107,
        5,116,0,0,107,108,5,114,0,0,108,109,5,97,0,0,109,110,5,99,0,0,110,
        111,5,116,0,0,111,2,1,0,0,0,112,113,5,97,0,0,113,114,5,115,0,0,114,
        115,5,115,0,0,115,116,5,101,0,0,116,117,5,116,0,0,117,4,1,0,0,0,
        118,119,5,97,0,0,119,120,5,115,0,0,120,121,5,115,0,0,121,122,5,111,
        0,0,122,123,5,99,0,0,123,124,5,105,0,0,124,125,5,97,0,0,125,126,
        5,116,0,0,126,127,5,105,0,0,127,128,5,111,0,0,128,129,5,110,0,0,
        129,130,5,115,0,0,130,6,1,0,0,0,131,132,5,101,0,0,132,133,5,120,
        0,0,133,134,5,116,0,0,134,135,5,101,0,0,135,136,5,110,0,0,136,137,
        5,100,0,0,137,138,5,115,0,0,138,8,1,0,0,0,139,140,5,105,0,0,140,
        141,5,110,0,0,141,142,5,99,0,0,142,143,5,108,0,0,143,144,5,117,0,
        0,144,145,5,100,0,0,145,146,5,101,0,0,146,10,1,0,0,0,147,148,5,99,
        0,0,148,149,5,97,0,0,149,150,5,116,0,0,150,151,5,101,0,0,151,152,
        5,103,0,0,152,153,5,111,0,0,153,154,5,114,0,0,154,155,5,121,0,0,
        155,12,1,0,0,0,156,157,5,105,0,0,157,158,5,110,0,0,158,159,5,102,
        0,0,159,160,5,111,0,0,160,14,1,0,0,0,161,162,5,108,0,0,162,163,5,
        101,0,0,163,164,5,116,0,0,164,16,1,0,0,0,165,171,5,34,0,0,166,170,
        8,0,0,0,167,168,5,92,0,0,168,170,9,0,0,0,169,166,1,0,0,0,169,167,
        1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,
        1,0,0,0,173,171,1,0,0,0,174,175,5,34,0,0,175,18,1,0,0,0,176,177,
        5,34,0,0,177,178,5,34,0,0,178,179,5,34,0,0,179,190,1,0,0,0,180,182,
        5,34,0,0,181,180,1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,0,183,185,
        5,34,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,189,
        8,1,0,0,187,189,7,2,0,0,188,181,1,0,0,0,188,187,1,0,0,0,189,192,
        1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,
        1,0,0,0,193,194,5,34,0,0,194,195,5,34,0,0,195,196,5,34,0,0,196,20,
        1,0,0,0,197,199,7,3,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,
        1,0,0,0,200,201,1,0,0,0,201,22,1,0,0,0,202,204,7,3,0,0,203,202,1,
        0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,
        0,0,0,207,205,1,0,0,0,208,210,3,69,34,0,209,211,7,3,0,0,210,209,
        1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,24,1,
        0,0,0,214,215,5,69,0,0,215,26,1,0,0,0,216,217,5,67,0,0,217,28,1,
        0,0,0,218,219,5,73,0,0,219,30,1,0,0,0,220,221,5,65,0,0,221,32,1,
        0,0,0,222,224,7,4,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,
        0,0,0,225,226,1,0,0,0,226,34,1,0,0,0,227,228,5,40,0,0,228,36,1,0,
        0,0,229,230,5,41,0,0,230,38,1,0,0,0,231,232,5,123,0,0,232,40,1,0,
        0,0,233,234,5,125,0,0,234,42,1,0,0,0,235,236,5,35,0,0,236,44,1,0,
        0,0,237,238,5,58,0,0,238,46,1,0,0,0,239,240,5,60,0,0,240,241,5,45,
        0,0,241,242,5,45,0,0,242,48,1,0,0,0,243,244,5,45,0,0,244,245,5,45,
        0,0,245,246,5,62,0,0,246,50,1,0,0,0,247,248,5,91,0,0,248,52,1,0,
        0,0,249,250,5,93,0,0,250,54,1,0,0,0,251,252,5,42,0,0,252,56,1,0,
        0,0,253,254,5,49,0,0,254,58,1,0,0,0,255,256,5,61,0,0,256,60,1,0,
        0,0,257,258,5,45,0,0,258,62,1,0,0,0,259,260,5,47,0,0,260,261,5,92,
        0,0,261,64,1,0,0,0,262,263,5,92,0,0,263,264,5,47,0,0,264,66,1,0,
        0,0,265,266,5,46,0,0,266,267,5,46,0,0,267,68,1,0,0,0,268,269,5,46,
        0,0,269,70,1,0,0,0,270,271,5,38,0,0,271,72,1,0,0,0,272,273,5,124,
        0,0,273,74,1,0,0,0,274,275,5,33,0,0,275,76,1,0,0,0,276,277,5,33,
        0,0,277,278,5,69,0,0,278,78,1,0,0,0,279,280,5,64,0,0,280,80,1,0,
        0,0,281,282,5,60,0,0,282,283,5,45,0,0,283,82,1,0,0,0,284,285,5,43,
        0,0,285,286,5,62,0,0,286,84,1,0,0,0,287,288,5,45,0,0,288,289,5,62,
        0,0,289,86,1,0,0,0,290,291,5,44,0,0,291,88,1,0,0,0,292,293,5,43,
        0,0,293,90,1,0,0,0,294,295,5,47,0,0,295,92,1,0,0,0,296,297,5,94,
        0,0,297,94,1,0,0,0,298,299,5,47,0,0,299,300,5,47,0,0,300,301,5,33,
        0,0,301,96,1,0,0,0,302,303,5,47,0,0,303,304,5,47,0,0,304,305,1,0,
        0,0,305,309,8,5,0,0,306,308,8,2,0,0,307,306,1,0,0,0,308,311,1,0,
        0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,1,0,
        0,0,312,313,6,48,0,0,313,98,1,0,0,0,314,315,5,47,0,0,315,316,5,42,
        0,0,316,320,1,0,0,0,317,319,9,0,0,0,318,317,1,0,0,0,319,322,1,0,
        0,0,320,321,1,0,0,0,320,318,1,0,0,0,321,323,1,0,0,0,322,320,1,0,
        0,0,323,324,5,42,0,0,324,325,5,47,0,0,325,326,1,0,0,0,326,327,6,
        49,0,0,327,100,1,0,0,0,328,329,7,6,0,0,329,330,1,0,0,0,330,331,6,
        50,0,0,331,102,1,0,0,0,13,0,169,171,181,184,188,190,200,205,212,
        225,309,320,1,6,0,0
    ]

class malLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ABSTRACT = 1
    ASSET = 2
    ASSOCIATIONS = 3
    EXTENDS = 4
    INCLUDE = 5
    CATEGORY = 6
    INFO = 7
    LET = 8
    STRING = 9
    MULTILINE_STRING = 10
    INT = 11
    FLOAT = 12
    EXISTS = 13
    C = 14
    I = 15
    A = 16
    ID = 17
    LPAREN = 18
    RPAREN = 19
    LCURLY = 20
    RCURLY = 21
    HASH = 22
    COLON = 23
    LARROW = 24
    RARROW = 25
    LSQUARE = 26
    RSQUARE = 27
    STAR = 28
    ONE = 29
    ASSIGN = 30
    MINUS = 31
    INTERSECT = 32
    UNION = 33
    RANGE = 34
    DOT = 35
    AND = 36
    OR = 37
    EXCLAMATION = 38
    NOTEXISTS = 39
    AT = 40
    REQUIRES = 41
    INHERITS = 42
    LEADSTO = 43
    COMMA = 44
    PLUS = 45
    DIVIDE = 46
    POWER = 47
    EXCLM_COMM = 48
    INLINE_COMMENT = 49
    MULTILINE_COMMENT = 50
    WS = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'abstract'", "'asset'", "'associations'", "'extends'", "'include'", 
            "'category'", "'info'", "'let'", "'E'", "'C'", "'I'", "'A'", 
            "'('", "')'", "'{'", "'}'", "'#'", "':'", "'<--'", "'-->'", 
            "'['", "']'", "'*'", "'1'", "'='", "'-'", "'/\\'", "'\\/'", 
            "'..'", "'.'", "'&'", "'|'", "'!'", "'!E'", "'@'", "'<-'", "'+>'", 
            "'->'", "','", "'+'", "'/'", "'^'", "'//!'" ]

    symbolicNames = [ "<INVALID>",
            "ABSTRACT", "ASSET", "ASSOCIATIONS", "EXTENDS", "INCLUDE", "CATEGORY", 
            "INFO", "LET", "STRING", "MULTILINE_STRING", "INT", "FLOAT", 
            "EXISTS", "C", "I", "A", "ID", "LPAREN", "RPAREN", "LCURLY", 
            "RCURLY", "HASH", "COLON", "LARROW", "RARROW", "LSQUARE", "RSQUARE", 
            "STAR", "ONE", "ASSIGN", "MINUS", "INTERSECT", "UNION", "RANGE", 
            "DOT", "AND", "OR", "EXCLAMATION", "NOTEXISTS", "AT", "REQUIRES", 
            "INHERITS", "LEADSTO", "COMMA", "PLUS", "DIVIDE", "POWER", "EXCLM_COMM", 
            "INLINE_COMMENT", "MULTILINE_COMMENT", "WS" ]

    ruleNames = [ "ABSTRACT", "ASSET", "ASSOCIATIONS", "EXTENDS", "INCLUDE", 
                  "CATEGORY", "INFO", "LET", "STRING", "MULTILINE_STRING", 
                  "INT", "FLOAT", "EXISTS", "C", "I", "A", "ID", "LPAREN", 
                  "RPAREN", "LCURLY", "RCURLY", "HASH", "COLON", "LARROW", 
                  "RARROW", "LSQUARE", "RSQUARE", "STAR", "ONE", "ASSIGN", 
                  "MINUS", "INTERSECT", "UNION", "RANGE", "DOT", "AND", 
                  "OR", "EXCLAMATION", "NOTEXISTS", "AT", "REQUIRES", "INHERITS", 
                  "LEADSTO", "COMMA", "PLUS", "DIVIDE", "POWER", "EXCLM_COMM", 
                  "INLINE_COMMENT", "MULTILINE_COMMENT", "WS" ]

    grammarFileName = "mal.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


