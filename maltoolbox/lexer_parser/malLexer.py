# Generated from mal.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,296,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,8,1,8,5,8,162,8,8,10,8,12,8,165,9,8,1,8,1,8,1,9,
        4,9,170,8,9,11,9,12,9,171,1,10,5,10,175,8,10,10,10,12,10,178,9,10,
        1,10,1,10,4,10,182,8,10,11,10,12,10,183,1,11,1,11,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,4,15,195,8,15,11,15,12,15,196,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
        1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,
        1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
        1,44,1,45,1,45,1,45,1,45,5,45,272,8,45,10,45,12,45,275,9,45,1,45,
        1,45,1,46,1,46,1,46,1,46,5,46,283,8,46,10,46,12,46,286,9,46,1,46,
        1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,2,163,284,0,48,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        1,0,4,1,0,48,57,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,
        9,10,13,13,32,32,302,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,
        0,0,3,106,1,0,0,0,5,112,1,0,0,0,7,125,1,0,0,0,9,133,1,0,0,0,11,141,
        1,0,0,0,13,150,1,0,0,0,15,155,1,0,0,0,17,159,1,0,0,0,19,169,1,0,
        0,0,21,176,1,0,0,0,23,185,1,0,0,0,25,187,1,0,0,0,27,189,1,0,0,0,
        29,191,1,0,0,0,31,194,1,0,0,0,33,198,1,0,0,0,35,200,1,0,0,0,37,202,
        1,0,0,0,39,204,1,0,0,0,41,206,1,0,0,0,43,208,1,0,0,0,45,210,1,0,
        0,0,47,214,1,0,0,0,49,218,1,0,0,0,51,220,1,0,0,0,53,222,1,0,0,0,
        55,224,1,0,0,0,57,226,1,0,0,0,59,228,1,0,0,0,61,230,1,0,0,0,63,233,
        1,0,0,0,65,236,1,0,0,0,67,239,1,0,0,0,69,241,1,0,0,0,71,243,1,0,
        0,0,73,245,1,0,0,0,75,248,1,0,0,0,77,250,1,0,0,0,79,253,1,0,0,0,
        81,256,1,0,0,0,83,259,1,0,0,0,85,261,1,0,0,0,87,263,1,0,0,0,89,265,
        1,0,0,0,91,267,1,0,0,0,93,278,1,0,0,0,95,292,1,0,0,0,97,98,5,97,
        0,0,98,99,5,98,0,0,99,100,5,115,0,0,100,101,5,116,0,0,101,102,5,
        114,0,0,102,103,5,97,0,0,103,104,5,99,0,0,104,105,5,116,0,0,105,
        2,1,0,0,0,106,107,5,97,0,0,107,108,5,115,0,0,108,109,5,115,0,0,109,
        110,5,101,0,0,110,111,5,116,0,0,111,4,1,0,0,0,112,113,5,97,0,0,113,
        114,5,115,0,0,114,115,5,115,0,0,115,116,5,111,0,0,116,117,5,99,0,
        0,117,118,5,105,0,0,118,119,5,97,0,0,119,120,5,116,0,0,120,121,5,
        105,0,0,121,122,5,111,0,0,122,123,5,110,0,0,123,124,5,115,0,0,124,
        6,1,0,0,0,125,126,5,101,0,0,126,127,5,120,0,0,127,128,5,116,0,0,
        128,129,5,101,0,0,129,130,5,110,0,0,130,131,5,100,0,0,131,132,5,
        115,0,0,132,8,1,0,0,0,133,134,5,105,0,0,134,135,5,110,0,0,135,136,
        5,99,0,0,136,137,5,108,0,0,137,138,5,117,0,0,138,139,5,100,0,0,139,
        140,5,101,0,0,140,10,1,0,0,0,141,142,5,99,0,0,142,143,5,97,0,0,143,
        144,5,116,0,0,144,145,5,101,0,0,145,146,5,103,0,0,146,147,5,111,
        0,0,147,148,5,114,0,0,148,149,5,121,0,0,149,12,1,0,0,0,150,151,5,
        105,0,0,151,152,5,110,0,0,152,153,5,102,0,0,153,154,5,111,0,0,154,
        14,1,0,0,0,155,156,5,108,0,0,156,157,5,101,0,0,157,158,5,116,0,0,
        158,16,1,0,0,0,159,163,5,34,0,0,160,162,9,0,0,0,161,160,1,0,0,0,
        162,165,1,0,0,0,163,164,1,0,0,0,163,161,1,0,0,0,164,166,1,0,0,0,
        165,163,1,0,0,0,166,167,5,34,0,0,167,18,1,0,0,0,168,170,7,0,0,0,
        169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,
        172,20,1,0,0,0,173,175,7,0,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,
        174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,
        181,3,67,33,0,180,182,7,0,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,
        181,1,0,0,0,183,184,1,0,0,0,184,22,1,0,0,0,185,186,5,69,0,0,186,
        24,1,0,0,0,187,188,5,67,0,0,188,26,1,0,0,0,189,190,5,73,0,0,190,
        28,1,0,0,0,191,192,5,65,0,0,192,30,1,0,0,0,193,195,7,1,0,0,194,193,
        1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,32,1,
        0,0,0,198,199,5,40,0,0,199,34,1,0,0,0,200,201,5,41,0,0,201,36,1,
        0,0,0,202,203,5,123,0,0,203,38,1,0,0,0,204,205,5,125,0,0,205,40,
        1,0,0,0,206,207,5,35,0,0,207,42,1,0,0,0,208,209,5,58,0,0,209,44,
        1,0,0,0,210,211,5,60,0,0,211,212,5,45,0,0,212,213,5,45,0,0,213,46,
        1,0,0,0,214,215,5,45,0,0,215,216,5,45,0,0,216,217,5,62,0,0,217,48,
        1,0,0,0,218,219,5,91,0,0,219,50,1,0,0,0,220,221,5,93,0,0,221,52,
        1,0,0,0,222,223,5,42,0,0,223,54,1,0,0,0,224,225,5,49,0,0,225,56,
        1,0,0,0,226,227,5,61,0,0,227,58,1,0,0,0,228,229,5,45,0,0,229,60,
        1,0,0,0,230,231,5,47,0,0,231,232,5,92,0,0,232,62,1,0,0,0,233,234,
        5,92,0,0,234,235,5,47,0,0,235,64,1,0,0,0,236,237,5,46,0,0,237,238,
        5,46,0,0,238,66,1,0,0,0,239,240,5,46,0,0,240,68,1,0,0,0,241,242,
        5,38,0,0,242,70,1,0,0,0,243,244,5,124,0,0,244,72,1,0,0,0,245,246,
        5,33,0,0,246,247,5,69,0,0,247,74,1,0,0,0,248,249,5,64,0,0,249,76,
        1,0,0,0,250,251,5,60,0,0,251,252,5,45,0,0,252,78,1,0,0,0,253,254,
        5,43,0,0,254,255,5,62,0,0,255,80,1,0,0,0,256,257,5,45,0,0,257,258,
        5,62,0,0,258,82,1,0,0,0,259,260,5,44,0,0,260,84,1,0,0,0,261,262,
        5,43,0,0,262,86,1,0,0,0,263,264,5,47,0,0,264,88,1,0,0,0,265,266,
        5,94,0,0,266,90,1,0,0,0,267,268,5,47,0,0,268,269,5,47,0,0,269,273,
        1,0,0,0,270,272,8,2,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,
        1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,
        6,45,0,0,277,92,1,0,0,0,278,279,5,47,0,0,279,280,5,42,0,0,280,284,
        1,0,0,0,281,283,9,0,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,285,
        1,0,0,0,284,282,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,
        5,42,0,0,288,289,5,47,0,0,289,290,1,0,0,0,290,291,6,46,0,0,291,94,
        1,0,0,0,292,293,7,3,0,0,293,294,1,0,0,0,294,295,6,47,0,0,295,96,
        1,0,0,0,8,0,163,171,176,183,196,273,284,1,6,0,0
    ]

class malLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ABSTRACT = 1
    ASSET = 2
    ASSOCIATIONS = 3
    EXTENDS = 4
    INCLUDE = 5
    CATEGORY = 6
    INFO = 7
    LET = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    EXISTS = 12
    C = 13
    I = 14
    A = 15
    ID = 16
    LPAREN = 17
    RPAREN = 18
    LCURLY = 19
    RCURLY = 20
    HASH = 21
    COLON = 22
    LARROW = 23
    RARROW = 24
    LSQUARE = 25
    RSQUARE = 26
    STAR = 27
    ONE = 28
    ASSIGN = 29
    MINUS = 30
    INTERSECT = 31
    UNION = 32
    RANGE = 33
    DOT = 34
    AND = 35
    OR = 36
    NOTEXISTS = 37
    AT = 38
    REQUIRES = 39
    INHERITS = 40
    LEADSTO = 41
    COMMA = 42
    PLUS = 43
    DIVIDE = 44
    POWER = 45
    INLINE_COMMENT = 46
    MULTILINE_COMMENT = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'abstract'", "'asset'", "'associations'", "'extends'", "'include'", 
            "'category'", "'info'", "'let'", "'E'", "'C'", "'I'", "'A'", 
            "'('", "')'", "'{'", "'}'", "'#'", "':'", "'<--'", "'-->'", 
            "'['", "']'", "'*'", "'1'", "'='", "'-'", "'/\\'", "'\\/'", 
            "'..'", "'.'", "'&'", "'|'", "'!E'", "'@'", "'<-'", "'+>'", 
            "'->'", "','", "'+'", "'/'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "ABSTRACT", "ASSET", "ASSOCIATIONS", "EXTENDS", "INCLUDE", "CATEGORY", 
            "INFO", "LET", "STRING", "INT", "FLOAT", "EXISTS", "C", "I", 
            "A", "ID", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "HASH", "COLON", 
            "LARROW", "RARROW", "LSQUARE", "RSQUARE", "STAR", "ONE", "ASSIGN", 
            "MINUS", "INTERSECT", "UNION", "RANGE", "DOT", "AND", "OR", 
            "NOTEXISTS", "AT", "REQUIRES", "INHERITS", "LEADSTO", "COMMA", 
            "PLUS", "DIVIDE", "POWER", "INLINE_COMMENT", "MULTILINE_COMMENT", 
            "WS" ]

    ruleNames = [ "ABSTRACT", "ASSET", "ASSOCIATIONS", "EXTENDS", "INCLUDE", 
                  "CATEGORY", "INFO", "LET", "STRING", "INT", "FLOAT", "EXISTS", 
                  "C", "I", "A", "ID", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
                  "HASH", "COLON", "LARROW", "RARROW", "LSQUARE", "RSQUARE", 
                  "STAR", "ONE", "ASSIGN", "MINUS", "INTERSECT", "UNION", 
                  "RANGE", "DOT", "AND", "OR", "NOTEXISTS", "AT", "REQUIRES", 
                  "INHERITS", "LEADSTO", "COMMA", "PLUS", "DIVIDE", "POWER", 
                  "INLINE_COMMENT", "MULTILINE_COMMENT", "WS" ]

    grammarFileName = "mal.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


