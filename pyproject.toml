[project]
name = "mal-toolbox"
version = "1.1.1"
authors = [
  { name="Andrei Buhaiu", email="buhaiu@kth.se" },
  { name="Joakim Loxdal", email="loxdal@kth.se" },
  { name="Nikolaos Kakouros", email="nkak@kth.se" },
  { name="Jakob Nyberg", email="jaknyb@kth.se" },
  { name="Giuseppe Nebbione", email="nebbione@kth.se" },
  { name="Sandor Berglund", email="sandor@kth.se" }
]
description = "A collection of tools used to create MAL models and attack graphs."
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "graphviz",
  "antlr4-tools",
  "antlr4-python3-runtime",
  "docopt",
  "PyYAML",
  "py2neo",
  "networkx"
]
license = {text = "Apache Software License"}
keywords = ["mal"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering"
]

[project.urls]
"Homepage" = "https://github.com/mal-lang/mal-toolbox"
"Bug Tracker" = "https://github.com/mal-lang/mal-toolbox/issues"
"Repository" = "https://github.com/mal-lang/mal-toolbox"

[project.optional-dependencies]
dev = [
    "pytest",
]

[project.scripts]
"maltoolbox" = "maltoolbox.__main__:main"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["maltoolbox*"]

[tool.setuptools.package-data]
maltoolbox = ["*.conf*", "py.typed"]

[tool.pytest.ini_options]
pythonpath = ['.']
filterwarnings = "ignore:invalid escape sequence"

[tool.mypy]
exclude = [
  'maltoolbox/ingestors',
  'maltoolbox/translators',
  'maltoolbox/language/compiler'
]
allow_redefinition = true

[tool.ruff]
# Same as TWMN version
target-version = "py310"

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
# Allow unused variables only if they're named `_`.
dummy-variable-rgx = "^_$"

# Try to fix all that it can
fixable = ["ALL"]

# Override certain rules based on file path
[tool.ruff.lint.per-file-ignores]
# Test files
"**/tests/*" = [
    "PLR2004", # Allow magic value comparisons
    "S101",    # Allow `assert` statements
    "S311",    # Allow use of the `random` module (no need for cryptographic security)
]
"maltoolbox/language/compiler/*.py" = [
    "F405", # Allow defined from star import
    "F403", # Allow star import
    "E741", # Allow ambiguous variable name
    "E743", # Allow ambiguous variable name
]
# Don't require superfluous parentheses in pytest fixures.
# See https://github.com/astral-sh/ruff/pull/12106 for discussion.
[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
split-on-trailing-comma = true
known-first-party = ["maltoolbox"]

# Unless this is explicitly set, Ruff won't check for long lines in docstrings.
# Thus, set this to the same ass Ruff's default length (88).
[tool.ruff.lint.pycodestyle]
max-doc-length = 88